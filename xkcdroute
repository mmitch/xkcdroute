#!/usr/bin/perl -w
#
# simple navigation software based on an idea from xkcd.org
#
# 2008 (c) by Christian Garbs <mitch@cgarbs.de>
# Licensed under GNU GPL
#

use strict;
use Math::Trig qw(great_circle_direction great_circle_distance deg2rad rad2deg);
use Socket;

#
# Constants
#


my $gpsd_host = 'localhost';
my $gpsd_port = 2947;
my $locationfile = '~/.xkcdroute';
my $verbose = 0;
my $sleep = 5;    # seconds between updates
my $nocourse = 1; # no compass
my $useflite = 0; # no flite
my $fliteslp = 24; # $sleep * 24 -> text announcement every 2 minutes


#
# Subroutines
#


sub show_usage()
# print usage instructions
{
    print <<'EOF';
xkcdroute [OPTION] [ <location> | <coordinate> ]

Displays  the   distance  and  bearing  from   your  current  position
(determined  via gpsd)  to a  selected target.   The target  is either
given via a known location or a coordinate.

A  coordinate basically  has  the form  'N51.00  E4.05' (latitude  and
longitude) or something similar.   The algorithm should detect several
variations of this  scheme.  It also parses Googlemaps  URLs when they
contain a  q= or  ll= parameter with  numeric values for  latitude and
longitude.

Known locations  are read from ~/.xkcdroute.  Every  line must consist
of a location name (used for the lookup), followed by a whitespace and
a coordinate.  Empty  lines are ignored and lines  starting with # are
treated as a comment.

 -c, --compass   read and process current direction from GPS 
 -f, --flite     use text-to-speech output
 -v, --verbose   activate verbose output
 -h, --help      show this help text
EOF
;
}

sub my_print(@)
# print a string if set to verbose
{
    print join(' ', @_) . "\n" if $verbose;
}

sub abend($@)
# exit with a defined error code and a message to stderr
{
    my $rc = shift @_;
    warn join(' ', @_) . "\n";
    exit $rc;
}

sub parse_coordinates($)
# try to parse a string as coordinates
{
    my $string = shift;

    # things like "N52 25.551 E009 25.574" (minutes!)  (WGS84)
    if ($string =~ /([ns])0*(\d+)\s+(\d+(?:\.\d+))\s+([eow])0*(\d+)\s+(\d+(?:\.\d+))/i) {
	my ($n, $s) = ($2 + $3/60, $5 + $6/60);
	if ($1 =~ /s/i) {
	    $n *= -1;
	}
	if ($4 =~ /w/i) {
	    $n *= -1;
	}
	print "$n  $s\n";
	return [$n, $s];
    }

    if ($string =~ /(-?\d+(?:\.\d+)?)\s+(-?\d+(?:\.\d+)?)/) {
	return [$1, $2];
    }

    if ($string =~ /(-?\d+(?:\.\d+)?)\s*:\s*(-?\d+(?:\.\d+)?)/) {
	return [$1, $2];
    }

    if ($string =~ /N(-?\s*\d+(?:\.\d+)?)\s*E\s*(-?\d+(?:\.\d+)?)/i) {
	return [$1, $2];
    }

    if ($string =~ /(-?\d+(\.\d+)?)\s*N\s*(-?\d+(\.\d+)?)\s*E/i) {
	return [$1, $2];
    }

    if ($string =~ /E(-?\s*\d+(?:\.\d+)?)\s*N\s*(-?\d+(?:\.\d+)?)/i) {
	return [$2, $1];
    }

    if ($string =~ /(-?\d+(?:\.\d+)?)\s*E\s*(-?\d+(?:\.\d+)?)\s*N/i) {
	return [$2, $1];
    }

    if ($string =~ m;^http://maps\.google.*/maps\?(?:[^&]+&)*q=(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?);i ) {
	return [$1, $2];
    }

    if ($string =~ m;^http://maps\.google.*/maps\?(?:[^&]+&)*s?ll=(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?);i ) {
	return [$1, $2];
    }

    return 0;
}

sub read_locations($)
# read stored locations
{
    my $file = shift;
    my @ret;

    $file =~ s/^~/$ENV{HOME}/;

    open LOCATIONS, '<', $file or die "can't open `$file': $!\n";
    while (my $line = <LOCATIONS>) {
	chomp $line;
	next if ($line =~ /^\s*$/);
	next if ($line =~ /^\s*\#/);
	
	if ($line =~ /^(\S+?)\s(.+)$/) {
	    push @ret, {
		LOCATION => $1,
		COORDINATES => $2
		};
	} else {
	    abend 3, "unparseable line $. in location database: `$line'";
	}

    }
    close LOCATIONS or die "can't close `$file': $!\n";

    my_print scalar(@ret), 'locations read';

    return \@ret;
}

sub filter_locations($$)
# filter desired location(s)
{
    my ($haystack, $needle) = (@_);

    my @ret = grep { $_->{LOCATION} =~ /$needle/ } @{$haystack};

    return \@ret;
}

# from Math::Trig manpage:  longitude, latitude
sub NESW { deg2rad($_[0]), deg2rad(90 - $_[1]) }

sub calculate_distance($$$)
# calculate distance in km from current position to target
#
# This uses a spherical model which can result in up to 0.55% error (0.3% mean error).
# See http://www.movable-type.co.uk/scripts/latlong.html and
# http://www.movable-type.co.uk/scripts/latlong-vincenty.html
# for better algorithms.
{
    my ($target, $lat1, $long1) = (@_);

    return great_circle_distance( NESW( $long1, $lat1 ), @{$target}, 6378);
}

sub calculate_bearing($$$)
# calculate direction from current position to target
{
    my ($target, $lat1, $long1) = (@_);

    return rad2deg( great_circle_direction( NESW( $long1, $lat1 ), @{$target} ) );
}


#
# Font subroutines
#

# 5 line dotty font
my $dottyfont = {
    '' => [
	   " .... ",
	   " :::: ",
	   " :::: ",
	   " :::: ",
	   " '''' ",
	   ],
	'1' => [
		"::",
		"::",
		"::",
		"::",
		"::",
		],
	'2' => [
		".::::.",
		"    ::",
		".::::'",
		"::    ",
		"::::::",
		],
	'3' => [
		".::::.",
		"    ::",
		"  ::: ",
		"    ::",
		"'::::'",
		],
	'4' => [
		"::    ",
		":: :: ",
		"::::::",
		"   :: ",
		"   :: ",
		],
	'5' => [
		"::::::",
		"::    ",
		":::::.",
		"    ::",
		":::::'",
		],
	'6' => [
		".::::.",
		"::    ",
		":::::.",
		"::  ::",
		"'::::'",
		],
	'7' => [
		"::::::",
		"    ::",
		"  .:' ",
		"  ::  ",
		"  ::  ",
		],
	'8' => [
		".::::.",
		"::  ::",
		" :::: ",
		"::  ::",
		"'::::'",
		],
	'9' => [
		".::::.",
		"::  ::",
		"':::::",
		"    ::",
		"    ::",
		],
	'0' => [
		".::::.",
		"::  ::",
		"::  ::",
		"::  ::",
		"'::::'",
		],
	'N' => [
		"::  ::",
		"::: ::",
		"::::::",
		":: :::",
		"::  ::",
		],
	'E' => [
		"::::::",
		"::    ",
		"::::  ",
		"::    ",
		"::::::",
		],
	'S' => [
		".::::.",
		"::    ",
		"'::::.",
		"    ::",
		"'::::'",
		],
	'W' => [
		"::    ::",
		"::    ::",
		"::    ::",
		"::.::.::",
		"::'  '::",
		],
	'.' => [
		"  ",
		"  ",
		"  ",
		"  ",
		"::",
		],
    };		

# 5 line round font
my $font = {
    '' => [
	   '      ',
	   ' 8888 ',
	   ' 8888 ',
	   ' 8888 ',
	   '      ',
	   ],
	'1' => [
		'88',
		'88',
		'88',
		'88',
		'88',
		],
	'2' => [
		'.8888.',
		'    88',
		" .d8P'",
		"d8'   ",
		'888888',
		],
	'3' => [
		'.8888.',
		'    88',
		'  888 ',
		'    88',
		"'8888'",
		],
	'4' => [
		'88    ',
		'88 88 ',
		'888888',
		'   88 ',
		'   88 ',
		],
	'5' => [
		'888888' ,
		'88    ',
		'88888.',
		'    88',
		"88888'",
		],
	'6' => [
		'.8888.',
		'88    ',
		'88888.',
		'88  88',
		"'8888'",
		],
	'7' => [
		'888888',
		'    88',
		"  .dP'",
		'  88  ',
		'  88  ',
		],
	'8' => [
		'.8888.',
		'88  88',
		' 8888 ',
		'88  88',
		"'8888'",
		],
	'9' => [
		'.8888.',
		'88  88',
		"'88888",
		'    88',
		'    88',
		],
	'0' => [
		'.8888.',
		'88  88',
		'88  88',
		'88  88',
		"'8888'",
		],
	'N' => [
		'88  88',
		'88b 88',
		'88Yb88',
		'88 Y88',
		'88  88',
		],
	'E' => [
		'888888',
		'88    ',
		'8888  ',
		'88    ',
		'888888',
		],
	'S' => [
		'.8888.',
		'88    ',
		"'Y88b.",
		'    88',
		"'8888'",
		],
	'W' => [
		'88    88',
		'88    88',
		'88 db 88',
		'88d88b88',
		"88'  '88",
		],
	'.' => [
		'  ',
		'  ',
		'  ',
		'  ',
		'88',
		],
    };		


sub new_string()
# creates an empty font-string
{
    return [ '', '', '', '', '' ];
}

sub concat_small($$)
# adds small text to a font-string
{
    my ($string, $add) = (@_);
    my $spaces = ' ' x length ($add);
    $string->[0] .= $spaces;
    $string->[1] .= $spaces;
    $string->[2] .= $spaces;
    $string->[3] .= $spaces;
    $string->[4] .= $add;
} 

sub concat_big($$)
# adds a big text to a font-string
{
    my ($string, $add) = (@_);
    while ($add =~ /(.)/g) {
	my $char = $1;
	$char = '' unless exists $font->{$char};
	foreach (0..4) {
	    $string->[$_] .= $font->{$char}->[$_] . '  ';
	}
    }
}

sub print_string($)
# print a font-string
{
    my $string = shift;
    foreach (0..4) {
	print $string->[$_] . "\n";
    }
   
}

sub to_clock($)
# converts degrees into "n o'clock"
{
    my $degrees = shift;
    my $hour = ($degrees-15)/30;
    $hour += 12 while $hour < 1;
    $hour -= 12 while $hour > 12;
    return $hour;
}

sub to_compass($)
# converts degrees into point of compass
{
    my $degrees = shift;
    my $index = sprintf('%0.f', ($degrees-11.25)/22.5);
    $index += 16 while $index < 0;
    $index -= 16 while $index > 16;
    return qw(N NNE NE ENE E ESE SE SSE S SSW SW WSW W WNW NW NNW)[$index];
}

sub to_direction($)
# converts degrees into point of compass (long text)
{
    my $text = to_compass(shift);
    $text =~ s/N/north/g;
    $text =~ s/E/east/g;
    $text =~ s/S/south/g;
    $text =~ s/W/west/g;
    return $text;
}


#
# Main program
#


# parse switches
while (defined $ARGV[0]) {
    if ($ARGV[0] eq '-c' or $ARGV[0] eq '--compass') {
	$nocourse = 0;
	shift @ARGV;
	next;
    }
    if ($ARGV[0] eq '-f' or $ARGV[0] eq '--flite') {
	$useflite = 1;
	shift @ARGV;
	next;
    }
    if ($ARGV[0] eq '-v' or $ARGV[0] eq '--verbose') {
	$verbose = 1;
	shift @ARGV;
	next;
    }
    last;
}

# prepare variables
my $params = join ' ', @ARGV;
my $target = undef;

# handle missing parameters
if ( $params eq '' ) {
    abend 8, 'no target given (add --help for help)';
}

# handle help
if ( $params eq '-h' or $params eq '--help' ) {
    show_usage;
    exit 0;
}

# handle direct coordinates
if ( $target = parse_coordinates( $params ) ) {
    my_print 'treating arguments as coordinates';

# handle location lookup
} else {
    my_print 'treating arguments as location';
    
    my_print 'opening location database';
    my $locations = read_locations($locationfile);

    my_print 'looking for locations';
    my $targets = filter_locations($locations, $params);
    my $target_count = scalar(@{$targets});

    if ($target_count == 0) {
	abend 1, "no suitable location found.";

    } elsif ($target_count > 1) {
	my_print 'multiple locations found:';
	print "$_->{LOCATION}\n" foreach (@{$targets});
	exit 2;
    }

    my_print 'matched location', $targets->[0]->{LOCATION};
    my_print 'using coordinates', $targets->[0]->{COORDINATES};

    $target = parse_coordinates($targets->[0]->{COORDINATES});

    die "got unparseable coordinates from location database\n" unless $target;
}

# start tracking

my $flitecnt = 0;

# one-time-conversion for target coordinates
$target = [ NESW($target->[1], $target->[0]) ];

my_print 'connecting to gpsd';
my $iaddr = inet_aton($gpsd_host) or abend 4, "unkown host: `$gpsd_host'";
my $paddr = sockaddr_in($gpsd_port, $iaddr);
my $proto = getprotobyname('tcp');

socket(SOCK, PF_INET, SOCK_STREAM, $proto) or abend 5, "socket error: $!";
connect(SOCK, $paddr) or abend 6, "connect error: $!";

# autoflush
my $old_fh = select(SOCK);
$| = 1;
select($old_fh);

# cache clear screen
my $cls = `clear`;

my_print 'connected';

while (1) {

    my_print 'sending o';
    print SOCK "o\015\012";
    my $line = <SOCK>;

    chomp $line;
    $line =~ s/\r$//;

    my $flitetxt = '';

    my_print "received: $line";
    if ($line eq 'GPSD,O=?') {
	print scalar localtime, " NO FIX!\n";
    } else {
	my @fields = split /\s+/, $line;
	my ($timestamp, $latitude, $longitude, $course, $bearing, $distance, $turn) = ($fields[1], $fields[3], $fields[4], $fields[7], undef, undef, undef);

	$distance = calculate_distance($target, $latitude, $longitude);
	$bearing = calculate_bearing($target, $latitude, $longitude);
	
	if ($nocourse or $course eq '?') {
	    $turn = '?';
	} else {
	    $turn = $bearing - $course;
	}
	
	print "$cls";
#       print "$line\n";
#	print scalar localtime, " N$latitude E$longitude C$course D$distance B$bearing T$turn\n";
	print '    time  ' . localtime( $timestamp) . "\n\n";
	
	my $klicks = sprintf('%.3f', $distance);
	my $string = new_string();
	concat_small($string, 'distance  ');
	concat_big($string, $klicks);
	concat_small($string, 'klicks');
	print_string($string);
	print "\n";
	
	$klicks =~ s/0+$//;
	$flitetxt .= "$klicks klicks  ";
	
	$string = new_string();
	concat_small($string, '  course  ');
	concat_big($string, to_compass($bearing));
	print_string($string);
	print "\n";
	
	$flitetxt .= to_direction($bearing);
	    
	if ($turn ne '?') {
	    my $hour = sprintf('%.0f', to_clock($turn));
	    $string = new_string();
	    concat_small($string, '       at  ');
	    concat_big($string, $hour);
	    concat_small($string, " o'clock");
	    print_string($string);
	    print "\n";

	    $flitetxt .= "  $hour o'clock";
	}

	if ($course ne '?') {
	    print '   course  ' . to_compass($course) . "\n";
	}

	if ($flitecnt == $fliteslp) {
	    $flitecnt = 0;
	    system ('flite', $flitetxt);
	}

    }

    sleep $sleep;

    $flitecnt += $useflite;

}

close(SOCK) or abend 7, "socket close error: $!";

